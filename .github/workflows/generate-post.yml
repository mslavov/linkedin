name: Generate LinkedIn Post

on:
  issues:
    types: [labeled]

jobs:
  generate-post:
    # Only run when 'linkedin-post' or 'idea' label is added by mslavov
    if: github.event.issue.user.login == 'mslavov' && (github.event.label.name == 'linkedin-post' || github.event.label.name == 'idea')
    
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update project status to Generating
        run: |
          # Get the project item ID for this issue
          ITEM_ID=$(gh api graphql -f query='
            query($issue: Int!, $owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $issue) {
                  projectItems(first: 10) {
                    nodes {
                      id
                      project {
                        number
                      }
                    }
                  }
                }
              }
            }
          ' -F issue=${{ github.event.issue.number }} -F owner="${{ github.repository_owner }}" -F repo="${{ github.event.repository.name }}" --jq '.data.repository.issue.projectItems.nodes[] | select(.project.number == 3) | .id')
          
          if [ -n "$ITEM_ID" ]; then
            echo "Found project item: $ITEM_ID"
            # Update status to Generating
            gh api graphql -f query='
              mutation($itemId: ID!, $statusId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: "PVT_kwHOACRKHs4A-6uX"
                    itemId: $itemId
                    fieldId: "PVTSSF_lAHOACRKHs4A-6uXzgyLTcw"
                    value: { singleSelectOptionId: $statusId }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            ' -f itemId="$ITEM_ID" -f statusId="71fa3682"
          else
            echo "Issue not found in project"
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Generate post content
        id: generate
        uses: anthropics/claude-code-base-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          model: "claude-opus-4-20250514"
          
          prompt: |
            You are creating a LinkedIn post based on issue #${{ github.event.issue.number }}.
            
            Issue Title: ${{ github.event.issue.title }}
            Issue Body: ${{ github.event.issue.body }}
            
            CRITICAL: Follow these steps IN ORDER and VERIFY each step completes:
            
            1. First, read ALL context files:
               - Read content/config/tone.md
               - Read content/config/best-practices.md  
               - Read content/config/memory.md
               - Read content/config/history.md
            
            2. Analyze the issue content and generate a LinkedIn post that:
               - Maintains narrative continuity with recent posts in history.md
               - Follows the voice guidelines from tone.md
               - Implements best practices from best-practices.md
               - Avoids topic fatigue (check last 3 posts for variety)
            
            3. Create the draft file:
               - Use Write tool to create a NEW file in content/drafts/
               - Filename: descriptive-slug.md (e.g., "ai-agent-building.md")
               - NO date prefix in filename
            
            4. File content structure (MUST include valid YAML frontmatter):
               ```
               ---
               title: "Engaging Title Here"
               tags: ["tag1", "tag2", "tag3"]
               priority: 1
               original_issue: ${{ github.event.issue.number }}
               ---
               
               [Post content with markdown for storage]
               [Remember: LinkedIn needs plain text when publishing]
               ```
            
            5. Git operations (execute these commands IN ORDER):
               - Run: git checkout -b claude/issue-${{ github.event.issue.number }}
               - Run: git add content/drafts/*.md
               - Run: git commit -m "Add LinkedIn post draft from issue #${{ github.event.issue.number }}"
               - Run: git push -u origin claude/issue-${{ github.event.issue.number }}
            
            6. Create Pull Request:
               - Use this EXACT command:
               gh pr create \
                 --title "Add LinkedIn post: ${{ github.event.issue.title }}" \
                 --body "Generated LinkedIn post from issue #${{ github.event.issue.number }}
               
               This PR adds a draft post that:
               - Maintains narrative continuity
               - Follows brand voice guidelines
               - Ready for review and scheduling
               
               Closes #${{ github.event.issue.number }}"
            
            VERIFICATION CHECKLIST:
            âœ“ Context files were read
            âœ“ Draft file was created with Write tool
            âœ“ File has valid frontmatter
            âœ“ Branch was created and checked out
            âœ“ Changes were added and committed
            âœ“ Branch was pushed to origin
            âœ“ PR was created with gh command
            
            If ANY step fails, STOP and report the error.
          
          allowed_tools: |
            Bash(gh pr create:*)

      - name: Verify PR Creation
        if: success()
        run: |
          # Wait a moment for PR to be indexed
          sleep 5
          
          # Check if PR was created for the branch
          # First try to find any branch starting with our pattern
          BRANCH_NAME=$(git branch -r | grep -E "origin/claude/issue-${{ github.event.issue.number }}($|-)" | head -1 | sed 's/.*origin\///')
          
          if [ -z "$BRANCH_NAME" ]; then
            # Fallback to expected branch name
            BRANCH_NAME="claude/issue-${{ github.event.issue.number }}"
          fi
          
          echo "Looking for PR with branch: $BRANCH_NAME"
          PR_URL=$(gh pr list --head "$BRANCH_NAME" --json url --jq '.[0].url' || echo "")
          
          if [ -z "$PR_URL" ]; then
            echo "PR was not created by Claude. Creating it now..."
            # Get the latest commit message
            COMMIT_MSG=$(git log -1 --pretty=%B)
            
            # Create the PR using the actual branch name
            gh pr create \
              --title "Add LinkedIn post from issue #${{ github.event.issue.number }}" \
              --body "Generated LinkedIn post from issue #${{ github.event.issue.number }}
              
              This PR was automatically created after content generation.
              
              Please review the draft post for:
              - Narrative continuity
              - Brand voice consistency
              - LinkedIn best practices
              
              Closes #${{ github.event.issue.number }}" \
              --head "$BRANCH_NAME"
            
            PR_URL=$(gh pr list --head "$BRANCH_NAME" --json url --jq '.[0].url')
          fi
          
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Link PR to Issue
        if: success()
        run: |
          # Add comment to issue with link to PR
          if [ -n "$PR_URL" ]; then
            gh issue comment ${{ github.event.issue.number }} --body "ðŸ¤– Draft post has been generated! Review the PR: $PR_URL"
          else
            gh issue comment ${{ github.event.issue.number }} --body "ðŸ¤– Draft post has been generated but PR creation failed. Please check the workflow logs."
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Update project status to Review
        if: success() && env.PR_URL != ''
        run: |
          # Get the project item ID for this issue
          ITEM_ID=$(gh api graphql -f query='
            query($issue: Int!, $owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $issue) {
                  projectItems(first: 10) {
                    nodes {
                      id
                      project {
                        number
                      }
                    }
                  }
                }
              }
            }
          ' -F issue=${{ github.event.issue.number }} -F owner="${{ github.repository_owner }}" -F repo="${{ github.event.repository.name }}" --jq '.data.repository.issue.projectItems.nodes[] | select(.project.number == 3) | .id')
          
          if [ -n "$ITEM_ID" ]; then
            echo "Updating project item to Review status"
            # Update status to Review
            gh api graphql -f query='
              mutation($itemId: ID!, $statusId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: "PVT_kwHOACRKHs4A-6uX"
                    itemId: $itemId
                    fieldId: "PVTSSF_lAHOACRKHs4A-6uXzgyLTcw"
                    value: { singleSelectOptionId: $statusId }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            ' -f itemId="$ITEM_ID" -f statusId="47fc9ee4"
          fi
        env:
          GH_TOKEN: ${{ github.token }}