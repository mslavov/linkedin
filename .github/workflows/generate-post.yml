name: Generate LinkedIn Post

on:
  issues:
    types: [labeled]

jobs:
  generate-post:
    # Only run when 'linkedin-post' or 'idea' label is added by mslavov
    if: github.event.issue.user.login == 'mslavov' && (github.event.label.name == 'linkedin-post' || github.event.label.name == 'idea')
    
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update project status to Generating
        run: |
          # Get the project item ID for this issue
          ITEM_ID=$(gh api graphql -f query='
            query($issue: Int!, $owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $issue) {
                  projectItems(first: 10) {
                    nodes {
                      id
                      project {
                        number
                      }
                    }
                  }
                }
              }
            }
          ' -F issue=${{ github.event.issue.number }} -F owner="${{ github.repository_owner }}" -F repo="${{ github.event.repository.name }}" --jq '.data.repository.issue.projectItems.nodes[] | select(.project.number == 3) | .id')
          
          if [ -n "$ITEM_ID" ]; then
            echo "Found project item: $ITEM_ID"
            # Update status to Generating
            gh api graphql -f query='
              mutation($itemId: ID!, $statusId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: "PVT_kwHOACRKHs4A-6uX"
                    itemId: $itemId
                    fieldId: "PVTSSF_lAHOACRKHs4A-6uXzgyLTcw"
                    value: { singleSelectOptionId: $statusId }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            ' -f itemId="$ITEM_ID" -f statusId="71fa3682"
          else
            echo "Issue not found in project"
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Generate post content
        id: generate
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          model: "claude-opus-4-20250514"
          
          direct_prompt: |
            You are creating a LinkedIn post based on issue #${{ github.event.issue.number }}.
            
            Issue Title: ${{ github.event.issue.title }}
            Issue Body: ${{ github.event.issue.body }}
            
            Please follow these steps EXACTLY:
            1. Read the context files in content/config/ (tone.md, best-practices.md, history.md)
            2. Generate a LinkedIn post draft that maintains narrative continuity with recent posts
            3. Create a new file in content/drafts/ with filename format: brief-descriptive-title.md (no date prefix)
            4. Include frontmatter with metadata (title, tags, priority, original_issue)
            5. Write the post content following LinkedIn best practices
            6. Create a new branch named 'claude/issue-${{ github.event.issue.number }}'
            7. Commit the draft with message: "Add LinkedIn post draft from issue #${{ github.event.issue.number }}"
            8. Push the branch to origin
            9. Create a Pull Request using EXACTLY this command:
               gh pr create --title "Add LinkedIn post: [brief title]" --body "Generated LinkedIn post from issue #${{ github.event.issue.number }}\n\nThis PR adds a draft post that:\n- [Brief summary]\n- Maintains narrative continuity with [reference]\n- Suggested posting time: [time]\n\nCloses #${{ github.event.issue.number }}"
            
            IMPORTANT: You MUST use the 'gh pr create' command shown above. Do NOT use any MCP tools for creating the PR.
          
          allowed_tools: "Read,Write,Bash(git checkout -b *),Bash(git add *),Bash(git commit *),Bash(git push *),Bash(gh pr create *)"

      - name: Verify PR Creation
        if: success()
        run: |
          # Wait a moment for PR to be indexed
          sleep 5
          
          # Check if PR was created for the branch
          PR_URL=$(gh pr list --head "claude/issue-${{ github.event.issue.number }}" --json url --jq '.[0].url' || echo "")
          
          if [ -z "$PR_URL" ]; then
            echo "PR was not created by Claude. Creating it now..."
            # Get the latest commit message
            COMMIT_MSG=$(git log -1 --pretty=%B)
            
            # Create the PR
            gh pr create \
              --title "Add LinkedIn post from issue #${{ github.event.issue.number }}" \
              --body "Generated LinkedIn post from issue #${{ github.event.issue.number }}
              
              This PR was automatically created after content generation.
              
              Please review the draft post for:
              - Narrative continuity
              - Brand voice consistency
              - LinkedIn best practices
              
              Closes #${{ github.event.issue.number }}" \
              --head "claude/issue-${{ github.event.issue.number }}"
            
            PR_URL=$(gh pr list --head "claude/issue-${{ github.event.issue.number }}" --json url --jq '.[0].url')
          fi
          
          echo "PR_URL=$PR_URL" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Link PR to Issue
        if: success()
        run: |
          # Add comment to issue with link to PR
          if [ -n "$PR_URL" ]; then
            gh issue comment ${{ github.event.issue.number }} --body "ðŸ¤– Draft post has been generated! Review the PR: $PR_URL"
          else
            gh issue comment ${{ github.event.issue.number }} --body "ðŸ¤– Draft post has been generated but PR creation failed. Please check the workflow logs."
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Update project status to Review
        if: success() && env.PR_URL != ''
        run: |
          # Get the project item ID for this issue
          ITEM_ID=$(gh api graphql -f query='
            query($issue: Int!, $owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $issue) {
                  projectItems(first: 10) {
                    nodes {
                      id
                      project {
                        number
                      }
                    }
                  }
                }
              }
            }
          ' -F issue=${{ github.event.issue.number }} -F owner="${{ github.repository_owner }}" -F repo="${{ github.event.repository.name }}" --jq '.data.repository.issue.projectItems.nodes[] | select(.project.number == 3) | .id')
          
          if [ -n "$ITEM_ID" ]; then
            echo "Updating project item to Review status"
            # Update status to Review
            gh api graphql -f query='
              mutation($itemId: ID!, $statusId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: "PVT_kwHOACRKHs4A-6uX"
                    itemId: $itemId
                    fieldId: "PVTSSF_lAHOACRKHs4A-6uXzgyLTcw"
                    value: { singleSelectOptionId: $statusId }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            ' -f itemId="$ITEM_ID" -f statusId="47fc9ee4"
          fi
        env:
          GH_TOKEN: ${{ github.token }}