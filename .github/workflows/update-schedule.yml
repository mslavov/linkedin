name: Schedule Approved Post

on:
  pull_request:
    types: [closed]
    paths:
      - "content/drafts/**/*.md"
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to process (e.g., 3)'
        required: true
        type: string
      draft_filename:
        description: 'Draft filename to schedule (optional, e.g., ai-eating-its-own-dogfood.md)'
        required: false
        type: string

jobs:
  schedule-post:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
          fetch-depth: 0

      - name: Move draft to scheduled
        id: move_draft
        run: |
          # Debug: Show current directory and contents
          echo "Current directory: $(pwd)"
          echo "Content structure:"
          ls -la content/
          echo "Drafts folder:"
          ls -la content/drafts/ || echo "No drafts folder"
          
          # Determine PR number based on trigger type
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
            echo "Manual trigger for PR #$PR_NUMBER"
          else
            PR_NUMBER="${{ github.event.pull_request.number }}"
            echo "Automatic trigger for PR #$PR_NUMBER"
          fi
          
          # If manual trigger with specific filename
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.draft_filename }}" ]; then
            FILENAME="${{ github.event.inputs.draft_filename }}"
            echo "Manual trigger with specific file: $FILENAME"
            DRAFT_FILE="content/drafts/$FILENAME"
          else
            # Method 1: Check what files were added/modified in the merge commit
            echo "=== Checking merge commit ==="
            MERGE_SHA=${{ github.event.pull_request.merge_commit_sha }}
            echo "Merge commit SHA: $MERGE_SHA"
            
            # Get files from the merge commit
            if [ -n "$MERGE_SHA" ]; then
              DRAFT_FILE=$(git diff-tree --no-commit-id --name-only -r $MERGE_SHA | grep "content/drafts/.*\.md" | head -1)
            fi
            
            if [ -z "$DRAFT_FILE" ]; then
              echo "No draft file in merge commit. Checking PR files via API..."
              # Method 2: Get files from PR API (most reliable)
              DRAFT_FILE=$(gh api /repos/${{ github.repository }}/pulls/$PR_NUMBER/files --jq '.[] | select(.filename | startswith("content/drafts/")) | select(.filename | endswith(".md")) | .filename' | head -1)
            fi
          fi
          
          if [ -z "$DRAFT_FILE" ]; then
            echo "No draft file found via API. Looking for any .md files in drafts folder..."
            # Method 3: Find any markdown files in drafts folder
            DRAFT_FILE=$(find content/drafts -name "*.md" -type f 2>/dev/null | head -1)
            if [ -n "$DRAFT_FILE" ]; then
              # Convert to relative path
              DRAFT_FILE=$(echo "$DRAFT_FILE" | sed 's|^\./||')
            fi
          fi
          
          if [ -z "$DRAFT_FILE" ]; then
            echo "ERROR: No draft file found in the PR or drafts folder"
            echo "PR Number: $PR_NUMBER"
            exit 1
          fi
          
          echo "Found draft file: $DRAFT_FILE"
          
          # Extract just the filename
          FILENAME=$(basename "$DRAFT_FILE")
          
          # Create scheduled directory if it doesn't exist
          mkdir -p content/scheduled/
          
          # Check if file exists in drafts folder
          if [ -f "$DRAFT_FILE" ]; then
            echo "File exists in drafts, moving to scheduled..."
            mv "$DRAFT_FILE" "content/scheduled/$FILENAME"
            echo "Successfully moved file"
          elif [ -f "content/scheduled/$FILENAME" ]; then
            echo "File already exists in scheduled folder (may have been moved in a previous run)"
          else
            echo "WARNING: File not found in expected location"
            echo "Searching for file in repository..."
            FOUND_FILE=$(find content -name "$FILENAME" -type f 2>/dev/null | head -1)
            if [ -n "$FOUND_FILE" ]; then
              echo "Found file at: $FOUND_FILE"
              if [[ "$FOUND_FILE" == *"/scheduled/"* ]]; then
                echo "File is already in scheduled folder"
              else
                echo "ERROR: File is in unexpected location: $FOUND_FILE"
                exit 1
              fi
            else
              echo "ERROR: File not found anywhere in content folder"
              exit 1
            fi
          fi
          
          # Set outputs for Claude scheduling
          echo "filename=$FILENAME" >> $GITHUB_OUTPUT
          echo "filepath=content/scheduled/$FILENAME" >> $GITHUB_OUTPUT
          
          echo "âœ… Post $FILENAME is ready for scheduling"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Update schedule with Claude
        if: github.event_name != 'workflow_dispatch'
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          model: "claude-opus-4-20250514"
          
          direct_prompt: |
            You need to update the content/schedule.json file to add a new scheduled post.
            
            New post details:
            - File: content/scheduled/${{ steps.move_draft.outputs.filename }}
            - PR Number: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.pr_number || github.event.pull_request.number }}
            - PR Title: ${{ github.event.pull_request.title || 'Manual trigger' }}
            
            Please:
            1. Read the current content/schedule.json file
            2. Read the new post file to understand its content and priority
            3. Analyze the current schedule to find the optimal slot
            4. Consider these scheduling rules:
               - High priority posts get the next available slot
               - Normal priority posts should be spaced at least 24 hours apart
               - Low priority posts can be scheduled further out
               - Avoid scheduling on weekends unless it's high priority
            5. Add the new post to the schedule.json with a unique ID
            6. Update the last_updated timestamp
            7. Commit the updated schedule.json
            
            The new entry should include:
            - id: Generate from the filename (e.g., "startup-lessons-2025")
            - file: The full path to the file
            - scheduled_date: The optimal date in YYYY-MM-DD format
            - priority: Extract from the post's frontmatter
            - original_issue: Extract from the post's frontmatter
            - status: "scheduled"
          
          allowed_tools: "Read,Edit,Bash(git add *),Bash(git commit *)"

      - name: Manual schedule update
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "Manual trigger - updating schedule.json directly"
          
          # Read the post file to get metadata
          POST_FILE="content/scheduled/${{ steps.move_draft.outputs.filename }}"
          if [ ! -f "$POST_FILE" ]; then
            echo "ERROR: Post file not found: $POST_FILE"
            exit 1
          fi
          
          # Extract metadata from frontmatter
          TITLE=$(grep -m1 "^title:" "$POST_FILE" | sed 's/^title: *//')
          PRIORITY=$(grep -m1 "^priority:" "$POST_FILE" | sed 's/^priority: *//' || echo "normal")
          ORIGINAL_ISSUE=$(grep -m1 "^original_issue:" "$POST_FILE" | sed 's/^original_issue: *//' || echo "")
          
          # Generate ID from filename
          ID=$(echo "${{ steps.move_draft.outputs.filename }}" | sed 's/\.md$//' | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
          
          # Calculate scheduled date (next weekday)
          TODAY=$(date +%u)
          if [ $TODAY -ge 5 ]; then
            # If Friday or later, schedule for Monday
            DAYS_TO_ADD=$((8 - $TODAY))
          else
            # Schedule for tomorrow
            DAYS_TO_ADD=1
          fi
          SCHEDULED_DATE=$(date -d "+$DAYS_TO_ADD days" +%Y-%m-%d 2>/dev/null || date -v +${DAYS_TO_ADD}d +%Y-%m-%d)
          
          # Update schedule.json
          if [ -f "content/schedule.json" ]; then
            # Add new entry to existing schedule
            jq --arg id "$ID" \
               --arg file "$POST_FILE" \
               --arg date "$SCHEDULED_DATE" \
               --arg priority "$PRIORITY" \
               --arg issue "$ORIGINAL_ISSUE" \
               '.posts += [{
                 "id": $id,
                 "file": $file,
                 "scheduled_date": $date,
                 "priority": $priority,
                 "original_issue": ($issue | tonumber? // null),
                 "status": "scheduled"
               }] | .last_updated = now | .posts |= sort_by(.scheduled_date)' \
               content/schedule.json > content/schedule.json.tmp && mv content/schedule.json.tmp content/schedule.json
          else
            # Create new schedule.json
            jq -n --arg id "$ID" \
                  --arg file "$POST_FILE" \
                  --arg date "$SCHEDULED_DATE" \
                  --arg priority "$PRIORITY" \
                  --arg issue "$ORIGINAL_ISSUE" \
                  '{
                    "posts": [{
                      "id": $id,
                      "file": $file,
                      "scheduled_date": $date,
                      "priority": $priority,
                      "original_issue": ($issue | tonumber? // null),
                      "status": "scheduled"
                    }],
                    "last_updated": now
                  }' > content/schedule.json
          fi
          
          # Commit the changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add content/schedule.json
          git commit -m "Schedule post: ${{ steps.move_draft.outputs.filename }} for $SCHEDULED_DATE"
          
          echo "âœ… Scheduled post for $SCHEDULED_DATE"

      - name: Push schedule update
        id: push_schedule
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git push
          
          # Extract scheduled date from commit message
          SCHEDULED_DATE=$(git log -1 --pretty=%B | grep -oP 'scheduled for \K\d{4}-\d{2}-\d{2}' || echo "the next available slot")
          echo "scheduled_date=$SCHEDULED_DATE" >> $GITHUB_OUTPUT

      - name: Extract issue number
        id: extract_issue
        run: |
          # Try to extract from PR body
          ISSUE_NUM=$(grep -oP '(?:Closes|Fixes|Resolves) #\K\d+' <<< "${{ github.event.pull_request.body }}" | head -1)
          
          # If not found in body, try PR title
          if [ -z "$ISSUE_NUM" ]; then
            ISSUE_NUM=$(grep -oP '#\K\d+' <<< "${{ github.event.pull_request.title }}" | head -1)
          fi
          
          echo "issue_number=$ISSUE_NUM" >> $GITHUB_OUTPUT

      - name: Update original issue
        if: success() && steps.extract_issue.outputs.issue_number != ''
        run: |
          gh issue comment ${{ steps.extract_issue.outputs.issue_number }} \
            --body "âœ… Post has been approved and scheduled for publishing on ${{ steps.push_schedule.outputs.scheduled_date }}!
            
            You can view the schedule at: [content/schedule.json](https://github.com/${{ github.repository }}/blob/main/content/schedule.json)"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Handle scheduling failure
        if: failure()
        run: |
          PR_NUM="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.pr_number || github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title || 'Manual trigger' }}"
          
          gh issue create \
            --title "Failed to schedule post from PR #$PR_NUM" \
            --body "The scheduling workflow failed for PR #$PR_NUM.
            
            **PR Title**: $PR_TITLE
            **Trigger Type**: ${{ github.event_name }}
            **Error**: Check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
            
            Please manually update the schedule or re-run the workflow." \
            --label "bug"
        env:
          GH_TOKEN: ${{ github.token }}