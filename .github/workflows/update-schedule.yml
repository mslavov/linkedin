name: Schedule Approved Post

on:
  pull_request:
    types: [closed]
    paths:
      - "content/drafts/**/*.md"

jobs:
  schedule-post:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
          fetch-depth: 0

      - name: Move draft to scheduled
        id: move_draft
        run: |
          # Debug: Show current directory and contents
          echo "Current directory: $(pwd)"
          echo "Content structure:"
          ls -la content/
          echo "Drafts folder:"
          ls -la content/drafts/ || echo "No drafts folder"
          
          # Method 1: Check what files were added/modified in the merge commit
          echo "=== Checking merge commit ==="
          MERGE_SHA=${{ github.event.pull_request.merge_commit_sha }}
          echo "Merge commit SHA: $MERGE_SHA"
          
          # Get files from the merge commit
          if [ -n "$MERGE_SHA" ]; then
            DRAFT_FILE=$(git diff-tree --no-commit-id --name-only -r $MERGE_SHA | grep "content/drafts/.*\.md" | head -1)
          fi
          
          if [ -z "$DRAFT_FILE" ]; then
            echo "No draft file in merge commit. Checking PR files via API..."
            # Method 2: Get files from PR API (most reliable)
            DRAFT_FILE=$(gh api /repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files --jq '.[] | select(.filename | startswith("content/drafts/")) | select(.filename | endswith(".md")) | .filename' | head -1)
          fi
          
          if [ -z "$DRAFT_FILE" ]; then
            echo "No draft file found via API. Looking for any .md files in drafts folder..."
            # Method 3: Find any markdown files in drafts folder
            DRAFT_FILE=$(find content/drafts -name "*.md" -type f 2>/dev/null | head -1)
            if [ -n "$DRAFT_FILE" ]; then
              # Convert to relative path
              DRAFT_FILE=$(echo "$DRAFT_FILE" | sed 's|^\./||')
            fi
          fi
          
          if [ -z "$DRAFT_FILE" ]; then
            echo "ERROR: No draft file found in the PR or drafts folder"
            echo "PR Number: ${{ github.event.pull_request.number }}"
            exit 1
          fi
          
          echo "Found draft file: $DRAFT_FILE"
          
          # Extract just the filename
          FILENAME=$(basename "$DRAFT_FILE")
          
          # Create scheduled directory if it doesn't exist
          mkdir -p content/scheduled/
          
          # Check if file exists in drafts folder
          if [ -f "$DRAFT_FILE" ]; then
            echo "File exists in drafts, moving to scheduled..."
            mv "$DRAFT_FILE" "content/scheduled/$FILENAME"
            echo "Successfully moved file"
          elif [ -f "content/scheduled/$FILENAME" ]; then
            echo "File already exists in scheduled folder (may have been moved in a previous run)"
          else
            echo "WARNING: File not found in expected location"
            echo "Searching for file in repository..."
            FOUND_FILE=$(find content -name "$FILENAME" -type f 2>/dev/null | head -1)
            if [ -n "$FOUND_FILE" ]; then
              echo "Found file at: $FOUND_FILE"
              if [[ "$FOUND_FILE" == *"/scheduled/"* ]]; then
                echo "File is already in scheduled folder"
              else
                echo "ERROR: File is in unexpected location: $FOUND_FILE"
                exit 1
              fi
            else
              echo "ERROR: File not found anywhere in content folder"
              exit 1
            fi
          fi
          
          # Set outputs for Claude scheduling
          echo "filename=$FILENAME" >> $GITHUB_OUTPUT
          echo "filepath=content/scheduled/$FILENAME" >> $GITHUB_OUTPUT
          
          echo "✅ Post $FILENAME is ready for scheduling"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Update schedule with Claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          model: "claude-opus-4-20250514"
          
          direct_prompt: |
            /schedule-post content/scheduled/${{ steps.move_draft.outputs.filename }} ${{ github.event.pull_request.number }} "${{ github.event.pull_request.title }}"
          
          allowed_tools: "Read,Edit,MultiEdit,LS,Bash(git add *),Bash(git commit *),Bash(git config *),Bash(git push *)"

      - name: Checkout main branch
        run: |
          echo "Ensuring we're on the main branch for pushing..."
          git checkout main
          echo "Successfully switched to main branch"

      - name: Push schedule update
        id: push_schedule
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if there are any changes to push
          if git diff --cached --quiet && git diff --quiet; then
            echo "No changes to push"
            echo "scheduled_date=none" >> $GITHUB_OUTPUT
          else
            # Push to main branch
            git push origin main
            
            # Extract scheduled date from commit message
            SCHEDULED_DATE=$(git log -1 --pretty=%B | grep -oP 'scheduled for \K\d{4}-\d{2}-\d{2}' || echo "the next available slot")
            echo "scheduled_date=$SCHEDULED_DATE" >> $GITHUB_OUTPUT
          fi

      - name: Extract issue number
        id: extract_issue
        run: |
          # Try to extract from PR body
          ISSUE_NUM=$(grep -oP '(?:Closes|Fixes|Resolves) #\K\d+' <<< "${{ github.event.pull_request.body }}" | head -1)
          
          # If not found in body, try PR title
          if [ -z "$ISSUE_NUM" ]; then
            ISSUE_NUM=$(grep -oP '#\K\d+' <<< "${{ github.event.pull_request.title }}" | head -1)
          fi
          
          echo "issue_number=$ISSUE_NUM" >> $GITHUB_OUTPUT

      - name: Update original issue
        if: success() && steps.extract_issue.outputs.issue_number != ''
        run: |
          gh issue comment ${{ steps.extract_issue.outputs.issue_number }} \
            --body "✅ Post has been approved and scheduled for publishing on ${{ steps.push_schedule.outputs.scheduled_date }}!
            
            You can view the schedule at: [content/schedule.json](https://github.com/${{ github.repository }}/blob/main/content/schedule.json)"
        env:
          GH_TOKEN: ${{ github.token }}
